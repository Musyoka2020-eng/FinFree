// FinFree - Main Application JavaScript

// Main app object to hold all functionality
const FinFree = {
    // Data storage
    data: {
        expenses: [],
        income: [],
        goals: [],
        budgets: {},
        pettyCash: [],
        settings: {
            dailyLimit: 20,
            currency: '$'
        }
    },

    // Initialize the application
    init() {
        console.log('FinFree initializing...');
        this.loadData();
        // Don't bind events immediately - wait for components to load if ComponentLoader exists
        if (typeof ComponentLoader === 'undefined') {
            this.bindEvents();
            this.showSection('dashboard');
        } else {
            // In modular system, ComponentLoader will handle the initial section load
            console.log('ComponentLoader detected - deferring event binding to after component load');
        }
        this.updateDashboard();
        this.setCurrentDate();
    },

    // Load data from localStorage
    loadData() {
        try {
            const stored = localStorage.getItem('finFreeData');
            if (stored) {
                this.data = { ...this.data, ...JSON.parse(stored) };
            }
        } catch (error) {
            console.error('Error loading data:', error);
        }
    },

    // Save data to localStorage
    saveData() {
        try {
            localStorage.setItem('finFreeData', JSON.stringify(this.data));
        } catch (error) {
            console.error('Error saving data:', error);
        }
    },

    // Initialize events after components are loaded (for modular system)
    initializeEvents() {
        console.log('FinFree initializing events after component load...');
        this.bindEvents();
        this.showSection('dashboard');
    },

    // Bind event listeners
    bindEvents() {
        // Navigation - check if elements exist first
        const navLinks = document.querySelectorAll('.nav-link');
        if (navLinks.length > 0) {
            navLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const section = link.dataset.section;
                    this.showSection(section);
                    this.updateNavigation(link);
                });
            });
        }

        // Mobile navigation toggle
        const navToggle = document.querySelector('.nav-toggle');
        const navMenu = document.querySelector('.nav-menu');
        
        if (navToggle && navMenu) {
            navToggle.addEventListener('click', () => {
                navMenu.classList.toggle('active');
            });

            // Close mobile menu when clicking on a link
            const navLinksInMenu = navMenu.querySelectorAll('.nav-link');
            navLinksInMenu.forEach(link => {
                link.addEventListener('click', () => {
                    navMenu.classList.remove('active');
                });
            });
        }
    },

    // Show specific section
    showSection(sectionName) {
        // Hide all sections
        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });

        // Show target section
        const targetSection = document.getElementById(sectionName);
        if (targetSection) {
            targetSection.classList.add('active');
        }

        // Update specific section content
        this.updateSectionContent(sectionName);
    },

    // Update section content (extracted for use by ComponentLoader)
    updateSectionContent(sectionName) {
        switch (sectionName) {
            case 'dashboard':
                this.updateDashboard();
                break;
            case 'expenses':
                this.displayExpenses();
                break;
            case 'budget':
                this.displayBudget();
                break;
            case 'earnings':
                this.displayIncome();
                break;
            case 'goals':
                this.displayGoals();
                break;
            case 'petty-cash':
                this.updatePettyCashDisplay();
                break;
        }
    },

    // Update navigation active state
    updateNavigation(activeLink) {
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        activeLink.classList.add('active');
    },

    // Set current date in date inputs
    setCurrentDate() {
        const today = new Date().toISOString().split('T')[0];
        const currentTime = new Date().toTimeString().split(' ')[0].substring(0, 5);
        
        // Set default dates
        const dateInputs = document.querySelectorAll('input[type="date"]');
        dateInputs.forEach(input => {
            if (!input.value) {
                input.value = today;
            }
        });

        // Set default time for petty cash
        const timeInput = document.getElementById('petty-time');
        if (timeInput && !timeInput.value) {
            timeInput.value = currentTime;
        }
    },

    // Update dashboard with latest data
    updateDashboard() {
        this.updateStats();
        this.updateRecentTransactions();
        this.updateBudgetOverview();
        this.updateGoalsProgress();
    },

    // Update dashboard statistics
    updateStats() {
        const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM format
        
        // Calculate total balance (income - expenses)
        const totalIncome = this.data.income.reduce((sum, item) => sum + item.amount, 0);
        const totalExpenses = this.data.expenses.reduce((sum, item) => sum + item.amount, 0);
        const totalBalance = totalIncome - totalExpenses;

        // Calculate monthly income and expenses
        const monthlyIncome = this.data.income
            .filter(item => item.date.startsWith(currentMonth))
            .reduce((sum, item) => sum + item.amount, 0);

        const monthlyExpenses = this.data.expenses
            .filter(item => item.date.startsWith(currentMonth))
            .reduce((sum, item) => sum + item.amount, 0);

        // Calculate emergency fund (goals with category 'emergency')
        const emergencyFund = this.data.goals
            .filter(goal => goal.category === 'emergency')
            .reduce((sum, goal) => sum + goal.current, 0);

        // Update DOM elements
        this.updateElement('total-balance', this.formatCurrency(totalBalance));
        this.updateElement('monthly-income', this.formatCurrency(monthlyIncome));
        this.updateElement('monthly-expenses', this.formatCurrency(monthlyExpenses));
        this.updateElement('emergency-fund', this.formatCurrency(emergencyFund));
    },

    // Update recent transactions display
    updateRecentTransactions() {
        const container = document.getElementById('recent-transactions');
        if (!container) return;

        // Combine expenses and income, sort by date
        const allTransactions = [
            ...this.data.expenses.map(item => ({ ...item, type: 'expense' })),
            ...this.data.income.map(item => ({ ...item, type: 'income' }))
        ].sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5);

        if (allTransactions.length === 0) {
            container.innerHTML = '<p class="text-center text-secondary">No transactions yet</p>';
            return;
        }

        container.innerHTML = allTransactions.map(transaction => `
            <div class="transaction-item">
                <div class="transaction-info">
                    <div class="transaction-description">${transaction.description}</div>
                    <div class="transaction-category">${transaction.category || transaction.source}</div>
                </div>
                <div class="transaction-amount ${transaction.type}">
                    ${transaction.type === 'expense' ? '-' : '+'}${this.formatCurrency(transaction.amount)}
                </div>
            </div>
        `).join('');
    },

    // Update budget overview on dashboard
    updateBudgetOverview() {
        const container = document.getElementById('budget-overview');
        if (!container) return;

        const currentMonth = new Date().toISOString().slice(0, 7);
        const budget = this.data.budgets[currentMonth];

        if (!budget) {
            container.innerHTML = '<p class="text-center text-secondary">No budget set for this month</p>';
            return;
        }

        const categories = Object.keys(budget).filter(key => key !== 'month');
        const budgetHtml = categories.map(category => {
            const budgeted = budget[category] || 0;
            const spent = this.data.expenses
                .filter(expense => expense.date.startsWith(currentMonth) && expense.category === category)
                .reduce((sum, expense) => sum + expense.amount, 0);
            
            const isOverBudget = spent > budgeted;
            
            return `
                <div class="budget-category">
                    <div class="category-name">${this.formatCategoryName(category)}</div>
                    <div class="category-amounts">
                        <span class="budgeted">${this.formatCurrency(budgeted)}</span>
                        <span class="spent ${isOverBudget ? 'over-budget' : 'under-budget'}">
                            ${this.formatCurrency(spent)}
                        </span>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = budgetHtml;
    },

    // Update goals progress on dashboard
    updateGoalsProgress() {
        const container = document.getElementById('goals-progress');
        if (!container) return;

        const activeGoals = this.data.goals
            .filter(goal => goal.current < goal.target)
            .sort((a, b) => new Date(a.deadline) - new Date(b.deadline))
            .slice(0, 3);

        if (activeGoals.length === 0) {
            container.innerHTML = '<p class="text-center text-secondary">No active goals</p>';
            return;
        }

        container.innerHTML = activeGoals.map(goal => {
            const progress = (goal.current / goal.target) * 100;
            const daysLeft = Math.ceil((new Date(goal.deadline) - new Date()) / (1000 * 60 * 60 * 24));
            
            return `
                <div class="goal-card">
                    <div class="goal-header">
                        <div class="goal-name">${goal.name}</div>
                        <div class="goal-category">${this.formatCategoryName(goal.category)}</div>
                    </div>
                    <div class="goal-progress">
                        <div class="goal-amounts">
                            <span>${this.formatCurrency(goal.current)}</span>
                            <span>${this.formatCurrency(goal.target)}</span>
                        </div>
                        <div class="goal-bar">
                            <div class="goal-fill" style="width: ${Math.min(progress, 100)}%"></div>
                        </div>
                    </div>
                    <div class="goal-deadline">
                        ${daysLeft > 0 ? `${daysLeft} days left` : 'Overdue'}
                    </div>
                </div>
            `;
        }).join('');
    },

    // Display expenses list
    displayExpenses() {
        const container = document.getElementById('expense-list');
        if (!container) return;

        // Apply filters
        const categoryFilter = document.getElementById('expense-category-filter')?.value || '';
        const dateFilter = document.getElementById('expense-date-filter')?.value || '';

        let filteredExpenses = [...this.data.expenses];

        if (categoryFilter) {
            filteredExpenses = filteredExpenses.filter(expense => expense.category === categoryFilter);
        }

        if (dateFilter) {
            const today = new Date();
            const expenseDate = new Date();
            
            filteredExpenses = filteredExpenses.filter(expense => {
                const expDate = new Date(expense.date);
                
                switch(dateFilter) {
                    case 'today':
                        return expDate.toDateString() === today.toDateString();
                    case 'week':
                        const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
                        return expDate >= weekAgo;
                    case 'month':
                        return expDate.getMonth() === today.getMonth() && expDate.getFullYear() === today.getFullYear();
                    case 'quarter':
                        const quarter = Math.floor(today.getMonth() / 3);
                        const expQuarter = Math.floor(expDate.getMonth() / 3);
                        return expQuarter === quarter && expDate.getFullYear() === today.getFullYear();
                    case 'year':
                        return expDate.getFullYear() === today.getFullYear();
                    default:
                        return true;
                }
            });
        }

        // Sort by date (newest first)
        filteredExpenses.sort((a, b) => new Date(b.date) - new Date(a.date));

        if (filteredExpenses.length === 0) {
            container.innerHTML = '<p class="text-center text-secondary">No expenses found</p>';
            return;
        }

        container.innerHTML = filteredExpenses.map(expense => `
            <div class="list-item">
                <div class="item-info">
                    <div class="item-title">${expense.description}</div>
                    <div class="item-details">
                        ${this.formatCategoryName(expense.category)} • ${this.formatDate(expense.date)}
                    </div>
                </div>
                <div class="item-amount expense">${this.formatCurrency(expense.amount)}</div>
            </div>
        `).join('');
    },

    // Display income list
    displayIncome() {
        const container = document.getElementById('income-history-list');
        if (!container) return;

        const sortedIncome = [...this.data.income].sort((a, b) => new Date(b.date) - new Date(a.date));

        if (sortedIncome.length === 0) {
            container.innerHTML = '<p class="text-center text-secondary">No income recorded yet</p>';
            return;
        }

        container.innerHTML = sortedIncome.map(income => `
            <div class="list-item">
                <div class="item-info">
                    <div class="item-title">${income.description}</div>
                    <div class="item-details">
                        ${this.formatCategoryName(income.source)} • ${this.formatDate(income.date)}
                        ${income.recurring ? ' • Recurring' : ''}
                    </div>
                </div>
                <div class="item-amount income">+${this.formatCurrency(income.amount)}</div>
            </div>
        `).join('');
    },

    // Display goals list
    displayGoals() {
        const container = document.getElementById('goals-list');
        if (!container) return;

        if (this.data.goals.length === 0) {
            container.innerHTML = '<p class="text-center text-secondary">No goals created yet</p>';
            return;
        }

        container.innerHTML = this.data.goals.map(goal => {
            const progress = (goal.current / goal.target) * 100;
            const daysLeft = Math.ceil((new Date(goal.deadline) - new Date()) / (1000 * 60 * 60 * 24));
            
            return `
                <div class="goal-card">
                    <div class="goal-header">
                        <div class="goal-name">${goal.name}</div>
                        <div class="goal-category">${this.formatCategoryName(goal.category)}</div>
                    </div>
                    <div class="goal-progress">
                        <div class="goal-amounts">
                            <span>${this.formatCurrency(goal.current)}</span>
                            <span>${this.formatCurrency(goal.target)}</span>
                        </div>
                        <div class="goal-bar">
                            <div class="goal-fill" style="width: ${Math.min(progress, 100)}%"></div>
                        </div>
                    </div>
                    <div class="goal-deadline">
                        Target: ${this.formatDate(goal.deadline)} 
                        (${daysLeft > 0 ? `${daysLeft} days left` : 'Overdue'})
                    </div>
                </div>
            `;
        }).join('');
    },

    // Display budget
    displayBudget() {
        const container = document.getElementById('budget-category-list');
        if (!container) return;

        // Show current month's budget by default
        const currentMonth = new Date().toISOString().slice(0, 7);
        const budget = this.data.budgets[currentMonth];

        if (!budget) {
            container.innerHTML = '<p class="text-center text-secondary">No budget created for this month</p>';
            return;
        }

        const categories = Object.keys(budget).filter(key => key !== 'month');
        const budgetHtml = `
            <div class="budget-month">${this.formatMonthYear(currentMonth)}</div>
            <div class="budget-overview">
                ${categories.map(category => {
                    const budgeted = budget[category] || 0;
                    const spent = this.data.expenses
                        .filter(expense => expense.date.startsWith(currentMonth) && expense.category === category)
                        .reduce((sum, expense) => sum + expense.amount, 0);
                    
                    const remaining = budgeted - spent;
                    const isOverBudget = spent > budgeted;
                    
                    return `
                        <div class="budget-category">
                            <div class="category-name">${this.formatCategoryName(category)}</div>
                            <div class="category-amounts">
                                <span class="budgeted">Budget: ${this.formatCurrency(budgeted)}</span>
                                <span class="spent ${isOverBudget ? 'over-budget' : 'under-budget'}">
                                    Spent: ${this.formatCurrency(spent)}
                                </span>
                                <span class="${remaining >= 0 ? 'text-success' : 'text-error'}">
                                    ${remaining >= 0 ? 'Remaining' : 'Over'}: ${this.formatCurrency(Math.abs(remaining))}
                                </span>
                            </div>
                        </div>
                    `;
                }).join('')}
            </div>
        `;

        container.innerHTML = budgetHtml;
    },

    // Update petty cash display
    updatePettyCashDisplay() {
        this.updatePettyCashSummary();
        this.displayPettyCashList();
    },

    // Update petty cash summary
    updatePettyCashSummary() {
        const today = new Date().toISOString().split('T')[0];
        const todayExpenses = this.data.pettyCash
            .filter(item => item.date === today)
            .reduce((sum, item) => sum + item.amount, 0);
        
        const dailyLimit = this.data.settings.dailyLimit;
        const remaining = Math.max(0, dailyLimit - todayExpenses);
        const progressPercent = Math.min((todayExpenses / dailyLimit) * 100, 100);

        this.updateElement('today-spent', this.formatCurrency(todayExpenses));
        this.updateElement('today-remaining', this.formatCurrency(remaining));
        
        const progressFill = document.getElementById('spending-fill');
        if (progressFill) {
            progressFill.style.width = `${progressPercent}%`;
        }
    },

    // Display petty cash list
    displayPettyCashList() {
        const container = document.getElementById('cash-transactions-list');
        if (!container) return;

        // Group by date
        const groupedExpenses = {};
        this.data.pettyCash.forEach(expense => {
            if (!groupedExpenses[expense.date]) {
                groupedExpenses[expense.date] = [];
            }
            groupedExpenses[expense.date].push(expense);
        });

        // Sort dates (newest first)
        const sortedDates = Object.keys(groupedExpenses).sort((a, b) => new Date(b) - new Date(a));

        if (sortedDates.length === 0) {
            container.innerHTML = '<p class="text-center text-secondary">No petty cash expenses recorded</p>';
            return;
        }

        container.innerHTML = sortedDates.map(date => {
            const expenses = groupedExpenses[date].sort((a, b) => a.time.localeCompare(b.time));
            const dailyTotal = expenses.reduce((sum, expense) => sum + expense.amount, 0);

            return `
                <div class="petty-cash-day">
                    <h4 class="date-header">${this.formatDate(date)} - Total: ${this.formatCurrency(dailyTotal)}</h4>
                    ${expenses.map(expense => `
                        <div class="list-item">
                            <div class="item-info">
                                <div class="item-title">${expense.description}</div>
                                <div class="item-details">${expense.time}</div>
                            </div>
                            <div class="item-amount expense">${this.formatCurrency(expense.amount)}</div>
                        </div>
                    `).join('')}
                </div>
            `;
        }).join('');
    },

    // Utility function to update element content
    updateElement(id, content) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = content;
        }
    },

    // Format currency
    formatCurrency(amount) {
        return `${this.data.settings.currency}${Math.abs(amount).toFixed(2)}`;
    },

    // Format date
    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    },

    // Format month year
    formatMonthYear(monthString) {
        return new Date(monthString + '-01').toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long'
        });
    },

    // Format category name
    formatCategoryName(category) {
        return category.charAt(0).toUpperCase() + category.slice(1).replace('-', ' ');
    },

    // Generate unique ID
    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    },

    // Show modal by ID
    async showModal(modalId) {
        // If ComponentLoader is available, try to load the modal first
        if (typeof ComponentLoader !== 'undefined') {
            await ComponentLoader.loadModal(modalId);
        }
        Modal.show(modalId);
    },

    // Hide modal by ID
    hideModal(modalId) {
        Modal.hide(modalId);
    },

    // Add new expense
    addExpense(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        
        const expense = {
            id: this.generateId(),
            description: formData.get('description'),
            amount: parseFloat(formData.get('amount')),
            category: formData.get('category'),
            date: formData.get('date'),
            paymentMethod: formData.get('paymentMethod') || 'cash',
            notes: formData.get('notes') || '',
            timestamp: new Date().toISOString()
        };

        // Validate required fields
        if (!expense.description || !expense.amount || !expense.category || !expense.date) {
            alert('Please fill in all required fields.');
            return;
        }

        // Add to data
        this.data.expenses.push(expense);
        this.saveData();

        // Update displays
        this.updateDashboard();
        if (document.getElementById('expense-list')) {
            this.displayExpenses();
        }

        // Close modal and reset form
        this.hideModal('expense-form');
        form.reset();
        this.setCurrentDate(); // Reset date to today
        
        // Show success message
        this.showNotification('Expense added successfully!', 'success');
    },

    // Add new income
    addIncome(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        
        const income = {
            id: this.generateId(),
            source: formData.get('source'),
            amount: parseFloat(formData.get('amount')),
            frequency: formData.get('frequency'),
            date: formData.get('date'),
            category: formData.get('category') || 'other',
            notes: formData.get('notes') || '',
            timestamp: new Date().toISOString()
        };

        // Validate required fields
        if (!income.source || !income.amount || !income.frequency || !income.date) {
            alert('Please fill in all required fields.');
            return;
        }

        // Add to data
        this.data.income.push(income);
        this.saveData();

        // Update displays
        this.updateDashboard();
        if (document.getElementById('income-history-list')) {
            this.displayIncome();
        }

        // Close modal and reset form
        this.hideModal('income-form');
        form.reset();
        this.setCurrentDate();
        
        this.showNotification('Income added successfully!', 'success');
    },

    // Set budget
    setBudget(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        const month = formData.get('month');
        
        if (!month) {
            alert('Please select a month.');
            return;
        }

        // Build budget object
        const budget = {
            month: month,
            food: parseFloat(formData.get('food')) || 0,
            transportation: parseFloat(formData.get('transportation')) || 0,
            shopping: parseFloat(formData.get('shopping')) || 0,
            entertainment: parseFloat(formData.get('entertainment')) || 0,
            bills: parseFloat(formData.get('bills')) || 0,
            healthcare: parseFloat(formData.get('healthcare')) || 0,
            education: parseFloat(formData.get('education')) || 0,
            travel: parseFloat(formData.get('travel')) || 0,
            other: parseFloat(formData.get('other')) || 0
        };

        // Save budget
        this.data.budgets[month] = budget;
        this.saveData();

        // Update displays
        this.updateDashboard();
        if (document.getElementById('budget-category-list')) {
            this.displayBudget();
        }

        // Close modal and reset form
        this.hideModal('budget-form');
        form.reset();
        
        this.showNotification('Budget set successfully!', 'success');
    },

    // Open calculator
    openCalculator(calculatorType) {
        console.log('Opening calculator:', calculatorType);
        
        // Show calculator results section
        const resultsSection = document.getElementById('calculator-results');
        if (resultsSection) {
            resultsSection.style.display = 'block';
            resultsSection.scrollIntoView({ behavior: 'smooth' });
            console.log('Results section displayed');
        } else {
            console.error('Calculator results section not found');
            alert('Calculator interface not found. Please refresh the page and try again.');
            return;
        }

        // Update calculator title
        const titleElement = document.getElementById('calculator-title');
        if (titleElement) {
            titleElement.textContent = this.getCalculatorTitle(calculatorType);
            console.log('Title updated to:', this.getCalculatorTitle(calculatorType));
        } else {
            console.error('Calculator title element not found');
        }

        // Load calculator content
        const contentElement = document.getElementById('calculator-content');
        if (contentElement) {
            const calculatorHTML = this.getCalculatorContent(calculatorType);
            contentElement.innerHTML = calculatorHTML;
            console.log('Calculator content loaded for:', calculatorType);
            
            // Initialize calculator-specific functionality
            this.initializeCalculator(calculatorType);
        } else {
            console.error('Calculator content element not found');
            alert('Calculator content area not found. Please refresh the page and try again.');
        }
    },

    // Clear calculator results
    clearCalculatorResults() {
        const resultsSection = document.getElementById('calculator-results');
        if (resultsSection) {
            resultsSection.style.display = 'none';
        }
    },

    // Get calculator title
    getCalculatorTitle(calculatorType) {
        const titles = {
            'emergency-fund': 'Emergency Fund Calculator',
            'loan': 'Loan Calculator',
            'retirement': 'Retirement Calculator',
            'investment': 'Investment Calculator',
            'debt-payoff': 'Debt Payoff Calculator',
            'mortgage': 'Mortgage Calculator',
            'savings-goal': 'Savings Goal Calculator',
            'tax': 'Tax Calculator',
            'net-worth': 'Net Worth Calculator'
        };
        return titles[calculatorType] || 'Financial Calculator';
    },

    // Get calculator content HTML
    getCalculatorContent(calculatorType) {
        switch(calculatorType) {
            case 'emergency-fund':
                return this.getEmergencyFundCalculator();
            case 'loan':
                return this.getLoanCalculator();
            case 'retirement':
                return this.getRetirementCalculator();
            case 'investment':
                return this.getInvestmentCalculator();
            case 'debt-payoff':
                return this.getDebtPayoffCalculator();
            case 'mortgage':
                return this.getMortgageCalculator();
            case 'savings-goal':
                return this.getSavingsGoalCalculator();
            case 'tax':
                return this.getTaxCalculator();
            case 'net-worth':
                return this.getNetWorthCalculator();
            default:
                return '<p>Calculator not available yet.</p>';
        }
    },

    // Emergency Fund Calculator HTML
    getEmergencyFundCalculator() {
        return `
            <div class="calculator-form">
                <div class="form-group">
                    <label for="monthly-expenses">Monthly Expenses ($)</label>
                    <input type="number" id="monthly-expenses" placeholder="3000" step="0.01">
                </div>
                <div class="form-group">
                    <label for="months-coverage">Months of Coverage</label>
                    <select id="months-coverage">
                        <option value="3">3 months (Minimum)</option>
                        <option value="6" selected>6 months (Recommended)</option>
                        <option value="9">9 months (Conservative)</option>
                        <option value="12">12 months (Very Conservative)</option>
                    </select>
                </div>
                <button onclick="FinFree.calculateEmergencyFund()" class="btn btn-primary">Calculate</button>
                <div id="emergency-fund-result" class="calculator-result"></div>
            </div>
        `;
    },

    // Loan Calculator HTML
    getLoanCalculator() {
        return `
            <div class="calculator-form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="loan-amount">Loan Amount ($)</label>
                        <input type="number" id="loan-amount" placeholder="10000" step="0.01">
                    </div>
                    <div class="form-group">
                        <label for="interest-rate">Annual Interest Rate (%)</label>
                        <input type="number" id="interest-rate" placeholder="5.5" step="0.01">
                    </div>
                </div>
                <div class="form-group">
                    <label for="loan-term">Loan Term (months)</label>
                    <input type="number" id="loan-term" placeholder="60" min="1">
                </div>
                <button onclick="FinFree.calculateLoan()" class="btn btn-primary">Calculate</button>
                <div id="loan-result" class="calculator-result"></div>
            </div>
        `;
    },

    // Investment Calculator HTML
    getInvestmentCalculator() {
        return `
            <div class="calculator-form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="initial-investment">Initial Investment ($)</label>
                        <input type="number" id="initial-investment" placeholder="1000" step="0.01">
                    </div>
                    <div class="form-group">
                        <label for="monthly-contribution">Monthly Contribution ($)</label>
                        <input type="number" id="monthly-contribution" placeholder="100" step="0.01">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="annual-return">Expected Annual Return (%)</label>
                        <input type="number" id="annual-return" placeholder="7" step="0.01">
                    </div>
                    <div class="form-group">
                        <label for="investment-years">Investment Period (years)</label>
                        <input type="number" id="investment-years" placeholder="10" min="1">
                    </div>
                </div>
                <button onclick="FinFree.calculateInvestment()" class="btn btn-primary">Calculate</button>
                <div id="investment-result" class="calculator-result"></div>
            </div>
        `;
    },

    // Initialize calculator-specific functionality
    initializeCalculator(calculatorType) {
        console.log('Initializing calculator:', calculatorType);
        
        // Wait for DOM to be ready
        setTimeout(() => {
            const calculateBtn = document.getElementById('calculate-btn');
            if (calculateBtn) {
                console.log('Calculate button found, adding event listener');
                // Remove any existing event listeners
                calculateBtn.replaceWith(calculateBtn.cloneNode(true));
                const newCalculateBtn = document.getElementById('calculate-btn');
                
                newCalculateBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    console.log('Calculate button clicked for:', calculatorType);
                    
                    switch (calculatorType) {
                        case 'emergency':
                            this.calculateEmergencyFund();
                            break;
                        case 'loan':
                            this.calculateLoan();
                            break;
                        case 'investment':
                            this.calculateInvestment();
                            break;
                        default:
                            console.error('Unknown calculator type:', calculatorType);
                    }
                });
                console.log('Event listener added to calculate button');
            } else {
                console.error('Calculate button not found after initialization');
            }
        }, 100); // Small delay to ensure DOM is ready
        
        // Add input event listeners for auto-validation
        const inputs = document.querySelectorAll('#calculator-content input');
        inputs.forEach(input => {
            input.addEventListener('input', () => {
                // Auto-validate inputs (optional)
            });
        });
    },

    // Calculate Emergency Fund
    calculateEmergencyFund() {
        const monthlyExpensesInput = document.getElementById('monthly-expenses');
        const monthsCoverageInput = document.getElementById('months-coverage');
        
        if (!monthlyExpensesInput || !monthsCoverageInput) {
            console.error('Emergency fund calculator inputs not found');
            alert('Calculator form not properly loaded. Please try again.');
            return;
        }

        const monthlyExpenses = parseFloat(monthlyExpensesInput.value) || 0;
        const monthsCoverage = parseFloat(monthsCoverageInput.value) || 6;
        
        if (monthlyExpenses <= 0) {
            alert('Please enter a valid monthly expense amount.');
            return;
        }

        const emergencyFund = monthlyExpenses * monthsCoverage;
        const resultDiv = document.getElementById('emergency-fund-result');
        
        if (!resultDiv) {
            console.error('Emergency fund result container not found');
            return;
        }
        
        resultDiv.innerHTML = `
            <div class="result-card">
                <h3>Emergency Fund Target</h3>
                <div class="result-amount">${this.formatCurrency(emergencyFund)}</div>
                <div class="result-details">
                    <p><strong>Monthly Expenses:</strong> ${this.formatCurrency(monthlyExpenses)}</p>
                    <p><strong>Coverage Period:</strong> ${monthsCoverage} months</p>
                    <div class="savings-plan">
                        <h4>Savings Plan</h4>
                        <p>Save <strong>${this.formatCurrency(emergencyFund / 12)}</strong> per month to reach your goal in 1 year</p>
                        <p>Save <strong>${this.formatCurrency(emergencyFund / 24)}</strong> per month to reach your goal in 2 years</p>
                    </div>
                </div>
            </div>
        `;
    },

    // Calculate Loan
    calculateLoan() {
        const loanAmountInput = document.getElementById('loan-amount');
        const interestRateInput = document.getElementById('interest-rate');
        const loanTermInput = document.getElementById('loan-term');
        
        if (!loanAmountInput || !interestRateInput || !loanTermInput) {
            console.error('Loan calculator inputs not found');
            alert('Calculator form not properly loaded. Please try again.');
            return;
        }

        const loanAmount = parseFloat(loanAmountInput.value) || 0;
        const annualRate = parseFloat(interestRateInput.value) || 0;
        const loanTermMonths = parseFloat(loanTermInput.value) || 0;
        
        if (loanAmount <= 0 || annualRate < 0 || loanTermMonths <= 0) {
            alert('Please enter valid loan details.');
            return;
        }

        const monthlyRate = (annualRate / 100) / 12;
        let monthlyPayment, totalPayment, totalInterest;

        if (monthlyRate === 0) {
            // Handle case where interest rate is 0
            monthlyPayment = loanAmount / loanTermMonths;
            totalPayment = loanAmount;
            totalInterest = 0;
        } else {
            monthlyPayment = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, loanTermMonths)) / (Math.pow(1 + monthlyRate, loanTermMonths) - 1);
            totalPayment = monthlyPayment * loanTermMonths;
            totalInterest = totalPayment - loanAmount;
        }

        const resultDiv = document.getElementById('loan-result');
        
        if (!resultDiv) {
            console.error('Loan result container not found');
            return;
        }
        
        resultDiv.innerHTML = `
            <div class="result-card">
                <h3>Loan Payment Details</h3>
                <div class="result-amount">${this.formatCurrency(monthlyPayment)}/month</div>
                <div class="result-details">
                    <p><strong>Loan Amount:</strong> ${this.formatCurrency(loanAmount)}</p>
                    <p><strong>Interest Rate:</strong> ${annualRate}% annual</p>
                    <p><strong>Loan Term:</strong> ${loanTermMonths} months (${Math.round(loanTermMonths/12 * 10) / 10} years)</p>
                    <p><strong>Total Payment:</strong> ${this.formatCurrency(totalPayment)}</p>
                    <p><strong>Total Interest:</strong> ${this.formatCurrency(totalInterest)}</p>
                </div>
            </div>
        `;
    },

    // Calculate Investment
    calculateInvestment() {
        const initialInvestmentInput = document.getElementById('initial-investment');
        const monthlyContributionInput = document.getElementById('monthly-contribution');
        const annualReturnInput = document.getElementById('annual-return');
        const investmentYearsInput = document.getElementById('investment-years');
        
        if (!initialInvestmentInput || !monthlyContributionInput || !annualReturnInput || !investmentYearsInput) {
            console.error('Investment calculator inputs not found');
            alert('Calculator form not properly loaded. Please try again.');
            return;
        }

        const initialInvestment = parseFloat(initialInvestmentInput.value) || 0;
        const monthlyContribution = parseFloat(monthlyContributionInput.value) || 0;
        const annualReturn = parseFloat(annualReturnInput.value) || 0;
        const investmentYears = parseFloat(investmentYearsInput.value) || 0;
        
        if (initialInvestment < 0 || monthlyContribution < 0 || annualReturn < 0 || investmentYears <= 0) {
            alert('Please enter valid investment details.');
            return;
        }

        const monthlyRate = (annualReturn / 100) / 12;
        const months = investmentYears * 12;
        
        let futureInitial, futureContributions;

        if (monthlyRate === 0) {
            // Handle case where return rate is 0
            futureInitial = initialInvestment;
            futureContributions = monthlyContribution * months;
        } else {
            // Future value of initial investment
            futureInitial = initialInvestment * Math.pow(1 + monthlyRate, months);
            
            // Future value of monthly contributions (annuity)
            if (monthlyContribution > 0) {
                futureContributions = monthlyContribution * ((Math.pow(1 + monthlyRate, months) - 1) / monthlyRate);
            } else {
                futureContributions = 0;
            }
        }
        
        const totalFutureValue = futureInitial + futureContributions;
        const totalContributions = initialInvestment + (monthlyContribution * months);
        const totalEarnings = totalFutureValue - totalContributions;

        const resultDiv = document.getElementById('investment-result');
        
        if (!resultDiv) {
            console.error('Investment result container not found');
            return;
        }
        
        resultDiv.innerHTML = `
            <div class="result-card">
                <h3>Investment Projection</h3>
                <div class="result-amount">${this.formatCurrency(totalFutureValue)}</div>
                <div class="result-details">
                    <p><strong>Total Contributions:</strong> ${this.formatCurrency(totalContributions)}</p>
                    <p><strong>Total Earnings:</strong> ${this.formatCurrency(totalEarnings)}</p>
                    <p><strong>Initial Investment:</strong> ${this.formatCurrency(initialInvestment)}</p>
                    <p><strong>Monthly Contributions:</strong> ${this.formatCurrency(monthlyContribution)}</p>
                    <p><strong>Investment Period:</strong> ${investmentYears} years</p>
                    <p><strong>Expected Annual Return:</strong> ${annualReturn}%</p>
                </div>
            </div>
        `;
    },

    // Placeholder methods for other calculators
    getRetirementCalculator() {
        return '<div class="calculator-form"><p>Retirement calculator coming soon...</p></div>';
    },

    getDebtPayoffCalculator() {
        return '<div class="calculator-form"><p>Debt payoff calculator coming soon...</p></div>';
    },

    getMortgageCalculator() {
        return '<div class="calculator-form"><p>Mortgage calculator coming soon...</p></div>';
    },

    getSavingsGoalCalculator() {
        return '<div class="calculator-form"><p>Savings goal calculator coming soon...</p></div>';
    },

    getTaxCalculator() {
        return '<div class="calculator-form"><p>Tax calculator coming soon...</p></div>';
    },

    getNetWorthCalculator() {
        return '<div class="calculator-form"><p>Net worth calculator coming soon...</p></div>';
    },

    // Add petty cash transaction
    addPettyCash(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        
        const transaction = {
            id: this.generateId(),
            type: formData.get('type'),
            description: formData.get('description'),
            amount: parseFloat(formData.get('amount')),
            category: formData.get('category') || 'other',
            date: formData.get('date'),
            time: formData.get('time') || new Date().toTimeString().split(' ')[0].substring(0, 5),
            notes: formData.get('notes') || '',
            timestamp: new Date().toISOString()
        };

        // Validate required fields
        if (!transaction.type || !transaction.description || !transaction.amount || !transaction.date) {
            alert('Please fill in all required fields.');
            return;
        }

        // Add to data
        this.data.pettyCash.push(transaction);
        this.saveData();

        // Update displays
        this.updateDashboard();
        if (document.getElementById('cash-transactions-list')) {
            this.updatePettyCashDisplay();
        }

        // Close modal and reset form
        this.hideModal('petty-cash-form');
        form.reset();
        this.setCurrentDate();
        
        this.showNotification('Petty cash transaction recorded!', 'success');
    },

    // Add new goal
    addGoal(event) {
        event.preventDefault();
        
        const form = event.target;
        const formData = new FormData(form);
        
        const goal = {
            id: this.generateId(),
            name: formData.get('name'),
            target: parseFloat(formData.get('target')),
            current: parseFloat(formData.get('current')) || 0,
            deadline: formData.get('deadline'),
            category: formData.get('category') || 'other',
            priority: formData.get('priority') || 'medium',
            notes: formData.get('notes') || '',
            createdAt: new Date().toISOString(),
            status: 'active'
        };

        // Validate required fields
        if (!goal.name || !goal.target || !goal.deadline) {
            alert('Please fill in all required fields.');
            return;
        }

        // Validate target is positive
        if (goal.target <= 0) {
            alert('Target amount must be greater than zero.');
            return;
        }

        // Validate current amount
        if (goal.current < 0) {
            alert('Current amount cannot be negative.');
            return;
        }

        // Add to data
        this.data.goals.push(goal);
        this.saveData();

        // Update displays
        this.updateDashboard();
        if (document.getElementById('goals-list')) {
            this.displayGoals();
        }

        // Close modal and reset form
        this.hideModal('goal-form');
        form.reset();
        
        this.showNotification('Goal created successfully!', 'success');
    },

    // Open guide
    openGuide(guideId) {
        const guides = {
            'emergency-fund': {
                title: 'Emergency Fund Guide',
                content: `
                    <h3>Why You Need an Emergency Fund</h3>
                    <p>An emergency fund is crucial for financial stability. It provides a safety net for unexpected expenses.</p>
                    <h4>How Much Should You Save?</h4>
                    <ul>
                        <li><strong>Minimum:</strong> 3 months of expenses</li>
                        <li><strong>Recommended:</strong> 6 months of expenses</li>
                        <li><strong>Conservative:</strong> 9-12 months of expenses</li>
                    </ul>
                    <h4>Where to Keep Your Emergency Fund</h4>
                    <ul>
                        <li>High-yield savings account</li>
                        <li>Money market account</li>
                        <li>Short-term CDs</li>
                    </ul>
                `
            },
            'budgeting-101': {
                title: 'Budgeting Basics',
                content: `
                    <h3>The 50/30/20 Rule</h3>
                    <p>A simple budgeting framework to get you started:</p>
                    <ul>
                        <li><strong>50% - Needs:</strong> Housing, utilities, groceries, minimum debt payments</li>
                        <li><strong>30% - Wants:</strong> Entertainment, dining out, hobbies</li>
                        <li><strong>20% - Savings:</strong> Emergency fund, retirement, debt payoff</li>
                    </ul>
                    <h4>Steps to Create Your Budget</h4>
                    <ol>
                        <li>Calculate your monthly income</li>
                        <li>List all your expenses</li>
                        <li>Categorize expenses as needs vs wants</li>
                        <li>Adjust spending to meet the 50/30/20 rule</li>
                        <li>Track and review monthly</li>
                    </ol>
                `
            },
            'investment-basics': {
                title: 'Investment Fundamentals',
                content: `
                    <h3>Getting Started with Investing</h3>
                    <p>Investing is essential for building long-term wealth and beating inflation.</p>
                    <h4>Basic Investment Types</h4>
                    <ul>
                        <li><strong>Stocks:</strong> Ownership shares in companies</li>
                        <li><strong>Bonds:</strong> Loans to governments or corporations</li>
                        <li><strong>ETFs:</strong> Diversified funds tracking indexes</li>
                        <li><strong>Mutual Funds:</strong> Professionally managed portfolios</li>
                    </ul>
                    <h4>Key Principles</h4>
                    <ul>
                        <li>Start early to benefit from compound interest</li>
                        <li>Diversify your portfolio</li>
                        <li>Invest regularly (dollar-cost averaging)</li>
                        <li>Keep costs low</li>
                        <li>Stay invested for the long term</li>
                    </ul>
                `
            }
        };

        const guide = guides[guideId];
        if (!guide) {
            this.showNotification('Guide not available yet.', 'error');
            return;
        }

        // Create or update guide modal
        let guideModal = document.getElementById('guide-modal');
        if (!guideModal) {
            guideModal = document.createElement('div');
            guideModal.id = 'guide-modal';
            guideModal.className = 'modal';
            document.body.appendChild(guideModal);
        }

        guideModal.innerHTML = `
            <div class="modal-overlay" onclick="FinFree.hideModal('guide-modal')"></div>
            <div class="modal-content">
                <div class="modal-header">
                    <h2>${guide.title}</h2>
                    <button type="button" class="modal-close" onclick="FinFree.hideModal('guide-modal')">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="guide-content">
                        ${guide.content}
                    </div>
                    <div class="guide-actions">
                        <button class="btn btn-primary" onclick="FinFree.hideModal('guide-modal')">
                            Got it!
                        </button>
                    </div>
                </div>
            </div>
        `;

        guideModal.classList.remove('hidden');
    },

    // Add placeholder methods for spending plan
    updateIncome() {
        this.showNotification('Feature coming soon!', 'info');
    },

    setupSpendingPlan() {
        this.showNotification('Spending plan setup coming soon!', 'info');
    },

    improveAutomation() {
        this.showNotification('Automation improvements coming soon!', 'info');
    },

    addFixedCost() {
        this.showNotification('Add fixed cost feature coming soon!', 'info');
    },

    addInvestment() {
        this.showNotification('Add investment feature coming soon!', 'info');
    },

    addSavingsGoal() {
        this.showModal('goal-form');
    },

    // Enhanced notification system
    showNotification(message, type = 'info') {
        // Simple notification - can be enhanced later
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10b981' : '#3b82f6'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            animation: slideIn 0.3s ease;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    },
};

// Modal utility functions
const Modal = {
    show(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('hidden');
            // Focus on first input
            const firstInput = modal.querySelector('input, select, textarea');
            if (firstInput) {
                setTimeout(() => firstInput.focus(), 100);
            }
        }
    },

    hide(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('hidden');
            // Reset form if exists
            const form = modal.querySelector('form');
            if (form) {
                form.reset();
                FinFree.setCurrentDate(); // Reset dates to current
            }
        }
    }
};

// Initialize app - will be called by ComponentLoader in modular system
// For backward compatibility with original index.html, also listen to DOMContentLoaded
document.addEventListener('DOMContentLoaded', () => {
    // Only auto-initialize if ComponentLoader is not present (original index.html)
    if (typeof ComponentLoader === 'undefined') {
        FinFree.init();
    }
});

// Make FinFree and Modal available globally
window.FinFree = FinFree;
window.Modal = Modal;